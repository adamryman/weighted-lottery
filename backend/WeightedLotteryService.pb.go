// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: WeightedLotteryService.proto

package lotteryService

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AllEventsRequest struct {
}

func (m *AllEventsRequest) Reset()         { *m = AllEventsRequest{} }
func (m *AllEventsRequest) String() string { return proto.CompactTextString(m) }
func (*AllEventsRequest) ProtoMessage()    {}
func (*AllEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f39933e685da5dc, []int{0}
}
func (m *AllEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllEventsRequest.Merge(m, src)
}
func (m *AllEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllEventsRequest proto.InternalMessageInfo

type AllEventsResponse struct {
}

func (m *AllEventsResponse) Reset()         { *m = AllEventsResponse{} }
func (m *AllEventsResponse) String() string { return proto.CompactTextString(m) }
func (*AllEventsResponse) ProtoMessage()    {}
func (*AllEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f39933e685da5dc, []int{1}
}
func (m *AllEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllEventsResponse.Merge(m, src)
}
func (m *AllEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllEventsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AllEventsRequest)(nil), "lotteryService.AllEventsRequest")
	proto.RegisterType((*AllEventsResponse)(nil), "lotteryService.AllEventsResponse")
}

func init() { proto.RegisterFile("WeightedLotteryService.proto", fileDescriptor_4f39933e685da5dc) }

var fileDescriptor_4f39933e685da5dc = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x09, 0x4f, 0xcd, 0x4c,
	0xcf, 0x28, 0x49, 0x4d, 0xf1, 0xc9, 0x2f, 0x29, 0x49, 0x2d, 0xaa, 0x0c, 0x4e, 0x2d, 0x2a, 0xcb,
	0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcb, 0x41, 0x11, 0x55, 0x12, 0xe2,
	0x12, 0x70, 0xcc, 0xc9, 0x71, 0x2d, 0x4b, 0xcd, 0x2b, 0x29, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x51, 0x12, 0xe6, 0x12, 0x44, 0x12, 0x2b, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x35, 0xca, 0xe4,
	0xe2, 0x43, 0x35, 0x50, 0x28, 0x1c, 0x43, 0x44, 0x41, 0x0f, 0xd5, 0x74, 0x3d, 0x74, 0xa3, 0xa5,
	0x14, 0xf1, 0xa8, 0x80, 0x58, 0xa4, 0xc4, 0xe0, 0x24, 0x71, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47,
	0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d,
	0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0x4f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x4b,
	0x8e, 0xe7, 0xe4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LotteryServiceClient is the client API for LotteryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LotteryServiceClient interface {
	LotteryService(ctx context.Context, in *AllEventsRequest, opts ...grpc.CallOption) (*AllEventsResponse, error)
}

type lotteryServiceClient struct {
	cc *grpc.ClientConn
}

func NewLotteryServiceClient(cc *grpc.ClientConn) LotteryServiceClient {
	return &lotteryServiceClient{cc}
}

func (c *lotteryServiceClient) LotteryService(ctx context.Context, in *AllEventsRequest, opts ...grpc.CallOption) (*AllEventsResponse, error) {
	out := new(AllEventsResponse)
	err := c.cc.Invoke(ctx, "/lotteryService.LotteryService/LotteryService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LotteryServiceServer is the server API for LotteryService service.
type LotteryServiceServer interface {
	LotteryService(context.Context, *AllEventsRequest) (*AllEventsResponse, error)
}

// UnimplementedLotteryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLotteryServiceServer struct {
}

func (*UnimplementedLotteryServiceServer) LotteryService(ctx context.Context, req *AllEventsRequest) (*AllEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LotteryService not implemented")
}

func RegisterLotteryServiceServer(s *grpc.Server, srv LotteryServiceServer) {
	s.RegisterService(&_LotteryService_serviceDesc, srv)
}

func _LotteryService_LotteryService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServiceServer).LotteryService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lotteryService.LotteryService/LotteryService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServiceServer).LotteryService(ctx, req.(*AllEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LotteryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lotteryService.LotteryService",
	HandlerType: (*LotteryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LotteryService",
			Handler:    _LotteryService_LotteryService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WeightedLotteryService.proto",
}

func (m *AllEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AllEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintWeightedLotteryService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AllEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovWeightedLotteryService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWeightedLotteryService(x uint64) (n int) {
	return sovWeightedLotteryService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeightedLotteryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWeightedLotteryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeightedLotteryService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWeightedLotteryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeightedLotteryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWeightedLotteryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeightedLotteryService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWeightedLotteryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWeightedLotteryService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWeightedLotteryService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeightedLotteryService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeightedLotteryService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWeightedLotteryService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWeightedLotteryService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWeightedLotteryService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWeightedLotteryService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWeightedLotteryService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWeightedLotteryService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWeightedLotteryService   = fmt.Errorf("proto: integer overflow")
)
